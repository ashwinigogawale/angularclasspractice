Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useEventListener.es", ['module', 'exports', 'require', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useEventListener;

    var _react = require("frontend-js-react-web$react");

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Hook for adding an event listener on mount and removing it on
     * unmount.
     *
     * Note that in general you should be using React's built-in delegated
     * event handling (ie. via `onclick`, `onfocus` etc attributes). This
     * hook is for those rarer cases where you need to attach a listener
     * outside of your component's DOM (eg. attaching a "scroll" or "resize"
     * listener to the `window`).
     */
    function useEventListener(eventName, handler, phase, target) {
      (0, _react.useEffect)(function () {
        if (target) {
          target.addEventListener(eventName, handler, phase);
          return function () {
            target.removeEventListener(eventName, handler, phase);
          };
        }
      }, [eventName, handler, phase, target]);
    }
    //# sourceMappingURL=useEventListener.es.js.map
  }
});
//# sourceMappingURL=useEventListener.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useIsMounted.es", ['module', 'exports', 'require', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useIsMounted;

    var _react = require("frontend-js-react-web$react");

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Hook for determining whether a component is still mounted.
     *
     * Use this to guard side-effects of asynchronous operations (fetches,
     * promises) that may complete after a component has been unmounted.
     *
     * Example:
     *
     *      const isMounted = useIsMounted();
     *      const [value, setHidden] = useHidden(true);
     *
     *      setTimeout(() => {
     *          if (isMounted()) {
     *              setHidden(true);
     *          }
     *      }, 1000);
     *
     */
    function useIsMounted() {
      var mountedRef = (0, _react.useRef)(false);
      var isMounted = (0, _react.useCallback)(function () {
        return mountedRef.current;
      }, []);
      (0, _react.useLayoutEffect)(function () {
        mountedRef.current = true;
        return function () {
          mountedRef.current = false;
        };
      }, []);
      return isMounted;
    }
    //# sourceMappingURL=useIsMounted.es.js.map
  }
});
//# sourceMappingURL=useIsMounted.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useInterval.es", ['module', 'exports', 'require', 'frontend-js-react-web$react', './useIsMounted.es'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useInterval;

    var _react = require("frontend-js-react-web$react");

    var _useIsMounted = _interopRequireDefault(require("./useIsMounted.es"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Hook for scheduling a repeating function call with the specified
     * interval (in milliseconds).
     */
    function useInterval() {
      var isMounted = (0, _useIsMounted["default"])();
      return (0, _react.useCallback)(function schedule(fn, ms) {
        var handle = setInterval(function () {
          if (isMounted()) {
            fn();
          } else {
            clearInterval(handle);
          }
        }, ms);
        return function () {
          return clearInterval(handle);
        };
      }, [isMounted]);
    }
    //# sourceMappingURL=useInterval.es.js.map
  }
});
//# sourceMappingURL=useInterval.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/usePrevious.es", ['module', 'exports', 'require', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = usePrevious;

    var _react = require("frontend-js-react-web$react");

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Hook for comparing current and previous values (of state, props or any
     * arbitrary value).
     *
     * @see https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state
     */
    function usePrevious(value) {
      var ref = (0, _react.useRef)();
      (0, _react.useEffect)(function () {
        ref.current = value;
      });
      return ref.current;
    }
    //# sourceMappingURL=usePrevious.es.js.map
  }
});
//# sourceMappingURL=usePrevious.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useStateSafe.es", ['module', 'exports', 'require', 'frontend-js-react-web', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useStateSafe;

    var _frontendJsReactWeb = require("frontend-js-react-web");

    var _react = _interopRequireDefault(require("frontend-js-react-web$react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    var useCallback = _react["default"].useCallback,
        useState = _react["default"].useState;
    /**
     * Wrapper for `useState` that does an `isMounted()` check behind the scenes
     * before triggering side-effects.
     */

    function useStateSafe(initialValue) {
      var isMounted = (0, _frontendJsReactWeb.useIsMounted)();

      var _useState = useState(initialValue),
          _useState2 = _slicedToArray(_useState, 2),
          state = _useState2[0],
          setState = _useState2[1];

      var setStateSafe = useCallback(function (newValue) {
        if (isMounted()) {
          setState(newValue);
        }
      }, [isMounted]);
      return [state, setStateSafe];
    }
    //# sourceMappingURL=useStateSafe.es.js.map
  }
});
//# sourceMappingURL=useStateSafe.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useThunk.es", ['module', 'exports', 'require', 'frontend-js-react-web', 'frontend-js-react-web$react'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useThunk;

    var _frontendJsReactWeb = require("frontend-js-react-web");

    var _react = _interopRequireDefault(require("frontend-js-react-web$react"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }

    function _iterableToArrayLimit(arr, i) {
      if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
        return;
      }var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;_e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    var useRef = _react["default"].useRef;
    /**
     * "Middleware" hook intended to wrap `useReducer` that enables you to dispatch
     * thunks (ie. functions that dispatch actions) as well as plain actions (ie.
     * objects).
     */

    function useThunk(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          state = _ref2[0],
          dispatch = _ref2[1];

      var isMounted = (0, _frontendJsReactWeb.useIsMounted)(); // Use a ref to ensure our `dispatch` is stable across renders, just
      // like the React-provided `dispatch` that we're wrapping.

      var thunkDispatch = useRef(function (action) {
        if (isMounted()) {
          if (typeof action === 'function') {
            return action(function (payload) {
              if (isMounted()) {
                dispatch(payload);
              }
            });
          } else {
            dispatch(action);
          }
        }
      });
      return [state, thunkDispatch.current];
    }
    //# sourceMappingURL=useThunk.es.js.map
  }
});
//# sourceMappingURL=useThunk.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/hooks/useTimeout.es", ['module', 'exports', 'require', 'frontend-js-react-web$react', './useIsMounted.es'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = useTimeout;

    var _react = require("frontend-js-react-web$react");

    var _useIsMounted = _interopRequireDefault(require("./useIsMounted.es"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */

    /**
     * Hook for delaying a function call by the specified interval (in
     * milliseconds).
     */
    function useTimeout() {
      var isMounted = (0, _useIsMounted["default"])();
      return (0, _react.useCallback)(function delay(fn, ms) {
        var handle = setTimeout(function () {
          if (isMounted()) {
            fn();
          }
        }, ms);
        return function () {
          return clearTimeout(handle);
        };
      }, [isMounted]);
    }
    //# sourceMappingURL=useTimeout.es.js.map
  }
});
//# sourceMappingURL=useTimeout.es.js.map
Liferay.Loader.define("frontend-js-react-web@4.0.18/js/index.es", ['module', 'exports', 'require', 'frontend-js-node-shims$process', './render.es', './hooks/useEventListener.es', './hooks/useInterval.es', './hooks/useIsMounted.es', './hooks/usePrevious.es', './hooks/useStateSafe.es', './hooks/useThunk.es', './hooks/useTimeout.es'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "render", {
      enumerable: true,
      get: function get() {
        return _render["default"];
      }
    });
    Object.defineProperty(exports, "useEventListener", {
      enumerable: true,
      get: function get() {
        return _useEventListener["default"];
      }
    });
    Object.defineProperty(exports, "useInterval", {
      enumerable: true,
      get: function get() {
        return _useInterval["default"];
      }
    });
    Object.defineProperty(exports, "useIsMounted", {
      enumerable: true,
      get: function get() {
        return _useIsMounted["default"];
      }
    });
    Object.defineProperty(exports, "usePrevious", {
      enumerable: true,
      get: function get() {
        return _usePrevious["default"];
      }
    });
    Object.defineProperty(exports, "useStateSafe", {
      enumerable: true,
      get: function get() {
        return _useStateSafe["default"];
      }
    });
    Object.defineProperty(exports, "useThunk", {
      enumerable: true,
      get: function get() {
        return _useThunk["default"];
      }
    });
    Object.defineProperty(exports, "useTimeout", {
      enumerable: true,
      get: function get() {
        return _useTimeout["default"];
      }
    });

    var _process = _interopRequireDefault(require("frontend-js-node-shims$process"));

    var _render = _interopRequireDefault(require("./render.es"));

    var _useEventListener = _interopRequireDefault(require("./hooks/useEventListener.es"));

    var _useInterval = _interopRequireDefault(require("./hooks/useInterval.es"));

    var _useIsMounted = _interopRequireDefault(require("./hooks/useIsMounted.es"));

    var _usePrevious = _interopRequireDefault(require("./hooks/usePrevious.es"));

    var _useStateSafe = _interopRequireDefault(require("./hooks/useStateSafe.es"));

    var _useThunk = _interopRequireDefault(require("./hooks/useThunk.es"));

    var _useTimeout = _interopRequireDefault(require("./hooks/useTimeout.es"));

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }

    /**
     * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
     *
     * This library is free software; you can redistribute it and/or modify it under
     * the terms of the GNU Lesser General Public License as published by the Free
     * Software Foundation; either version 2.1 of the License, or (at your option)
     * any later version.
     *
     * This library is distributed in the hope that it will be useful, but WITHOUT
     * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
     * details.
     */
    // Egregious hack because react-dnd expects `window.process` to exist:
    //
    // https://github.com/react-dnd/asap/blob/b6bebeb734/src/node/asap.ts#L24
    if (!window.process) {
      window.process = _process["default"];
    }
    //# sourceMappingURL=index.es.js.map
  }
});
//# sourceMappingURL=index.es.js.map
Liferay.Loader.define("frontend-js-web@4.0.38/liferay/toast/commands/OpenToast.es", ['module', 'exports', 'require', '@frontend-taglib-clay$clayui/alert', 'frontend-js-react-web', 'frontend-js-metal-web$metal-dom', 'frontend-js-react-web$react', 'frontend-js-react-web$react-dom'], function (module, exports, require) {
  var define = undefined;
  var global = window;
  {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.openToast = openToast;
    exports.default = void 0;

    var _alert = _interopRequireDefault(require("@frontend-taglib-clay$clayui/alert"));

    var _frontendJsReactWeb = require("frontend-js-react-web");

    var _metalDom = require("frontend-js-metal-web$metal-dom");

    var _react = _interopRequireDefault(require("frontend-js-react-web$react"));

    var _reactDom = require("frontend-js-react-web$react-dom");

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }return target;
      };return _extends.apply(this, arguments);
    }

    var DEFAULT_ALERT_CONTAINER_ID = 'ToastAlertContainer';
    var DEFAULT_RENDER_DATA = {
      portletId: 'UNKNOWN_PORTLET_ID'
    };
    var DEFAULT_TOAST_TYPE_TITLES = {
      danger: 'Error',
      info: 'Info',
      success: 'Success',
      warning: 'Warning'
    };
    var TOAST_AUTO_CLOSE_INTERVAL = 5000;
    var TPL_ALERT_CONTAINER = "\n\t<div class=\"alert-container container\">\n\t\t<div class=\"alert-notifications alert-notifications-fixed\" id=".concat(DEFAULT_ALERT_CONTAINER_ID, "></div>\n\t</div>\n");

    var getRootElement = function getRootElement(_ref) {
      var container = _ref.container,
          containerId = _ref.containerId;

      if (container || containerId) {
        container = container || document.getElementById(containerId);

        if (container) {
          var child = document.createElement('div');
          container.appendChild(child);
          return child;
        }
      }

      var alertFixed = document.getElementById(DEFAULT_ALERT_CONTAINER_ID);

      if (!alertFixed) {
        alertFixed = (0, _metalDom.buildFragment)(TPL_ALERT_CONTAINER).querySelector('.alert-container.container');
        alertFixed = document.body.appendChild(alertFixed);
      } // Creates a fragment to prevent React from unmounting the alert container


      container = document.createElement('div');
      container.className = 'mb-3';
      var fragmentContainer = document.querySelector(".alert-notifications.alert-notifications-fixed");
      fragmentContainer.appendChild(container);
      return container;
    };
    /**
     * Function that implements the Toast pattern, which allows to present feedback
     * to user actions as a toast message in the lower left corner of the page
     *
     * @param {number|boolean} autoClose Flag to indicate alert should automatically call onClose.
     * It also accepts a duration (in ms) which indicates how long to wait. If true is passed in, the
     * timeout will be 10000ms. See https://clayui.com/docs/components/alert.html for more details.
     * @param {HTMLElement} container Target element where the toast React component should be mounted.
     * @param {string} containerId The id of the element where the toast React component should be mounted.
     * @param {string|HTML} message The message to show in the toast notification
     * @param {string|HTML} title The title associated with the message
     * @param {string} displayType The displayType of notification to show. It can be one of the
     * following: 'danger', 'info', 'success', 'warning'
     * @return {ClayToast} The Alert toast created
     * @review
     */

    function openToast(_ref2) {
      var _ref2$autoClose = _ref2.autoClose,
          autoClose = _ref2$autoClose === void 0 ? TOAST_AUTO_CLOSE_INTERVAL : _ref2$autoClose,
          container = _ref2.container,
          containerId = _ref2.containerId,
          _ref2$message = _ref2.message,
          message = _ref2$message === void 0 ? '' : _ref2$message,
          _ref2$onClick = _ref2.onClick,
          _onClick = _ref2$onClick === void 0 ? function () {} : _ref2$onClick,
          _ref2$onClose = _ref2.onClose,
          onClose = _ref2$onClose === void 0 ? function () {} : _ref2$onClose,
          _ref2$renderData = _ref2.renderData,
          renderData = _ref2$renderData === void 0 ? DEFAULT_RENDER_DATA : _ref2$renderData,
          title = _ref2.title,
          _ref2$toastProps = _ref2.toastProps,
          toastProps = _ref2$toastProps === void 0 ? {} : _ref2$toastProps,
          _ref2$type = _ref2.type,
          type = _ref2$type === void 0 ? 'success' : _ref2$type,
          variant = _ref2.variant;

      var rootElement = getRootElement({
        container: container,
        containerId: containerId
      });
      (0, _reactDom.unmountComponentAtNode)(rootElement);

      var onCloseFn = function onCloseFn(event) {
        if (onClose) {
          onClose({
            event: event
          });
        }

        if (!event || !event.defaultPrevented) {
          if (!container || !containerId) {
            rootElement.parentNode.removeChild(rootElement);
          }

          (0, _reactDom.unmountComponentAtNode)(rootElement);
        }
      };

      var titleHTML = title === undefined ? DEFAULT_TOAST_TYPE_TITLES[type] : title;

      if (titleHTML) {
        titleHTML = titleHTML.replace(/:$/, '');
        titleHTML = "<strong class=\"lead\">".concat(titleHTML, ":</strong>");
      } else {
        titleHTML = '';
      }

      (0, _frontendJsReactWeb.render)( /*#__PURE__*/_react.default.createElement(_alert.default, _extends({
        autoClose: autoClose,
        displayType: type,
        onClick: function onClick(event) {
          return _onClick({
            event: event,
            onClose: onCloseFn
          });
        },
        onClose: onCloseFn,
        variant: variant
      }, toastProps), /*#__PURE__*/_react.default.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: "".concat(titleHTML).concat(message)
        }
      })), renderData, rootElement);
    }

    var _default = openToast;
    exports.default = _default;
    //# sourceMappingURL=OpenToast.es.js.map
  }
});
//# sourceMappingURL=OpenToast.es.js.map
Liferay.Loader.define('frontend-js-web@4.0.38/bridge/frontend-js-web/liferay/toast/commands/OpenToast.es', ['module', 'frontend-js-web/liferay/toast/commands/OpenToast.es'], function (module, src) {
  module.exports = src;
});
